#!/bin/bash

# 确保tmux已安装
command -v tmux >/dev/null 2>&1 || { echo "需要安装tmux。请运行: brew install tmux"; exit 1; }

# 创建一个新的tmux会话
tmux new-session -d -s therapy_assistant

# 关闭可能占用端口的程序
tmux send-keys -t therapy_assistant "python close.py && echo 'PORT_CLOSED'" C-m

# 等待close.py执行完成
echo "等待端口释放..."
while true; do
  if tmux capture-pane -pt therapy_assistant | grep -q "PORT_CLOSED"; then
    echo "端口已成功释放"
    break
  fi
  sleep 1
done

sleep 5

# 创建窗口并运行app.py
tmux new-window -t therapy_assistant:1 -n "app"
tmux send-keys -t therapy_assistant:1 "conda activate psy" C-m
tmux send-keys -t therapy_assistant:1 "python src/backend/app.py" C-m

# 创建窗口并运行main.py
tmux new-window -t therapy_assistant:2 -n "main"
tmux send-keys -t therapy_assistant:2 "conda activate psy" C-m
tmux send-keys -t therapy_assistant:2 "python src/main.py" C-m
# 创建窗口并运行npm
tmux new-window -t therapy_assistant:3 -n "frontend"
tmux send-keys -t therapy_assistant:3 "npm start | tee /tmp/npm_start_log.txt" C-m

# 等待前端服务启动
echo "等待前端服务启动..."
while true; do
  if grep -q "Compiled successfully" /tmp/npm_start_log.txt 2>/dev/null || grep -q "webpack compiled" /tmp/npm_start_log.txt 2>/dev/null; then
    echo "前端服务已启动成功"
    break
  fi
  sleep 1
done

# 再额外等待几秒确保服务稳定
sleep 7

# 发送启动请求
tmux new-window -t therapy_assistant:4 -n "control"
tmux send-keys -t therapy_assistant:4 "curl -X POST http://localhost:31415/start" C-m
# 附加到tmux会话
echo "所有服务已在tmux会话中启动"
echo "请运行 'tmux attach -t therapy_assistant' 连接到会话"
echo "在tmux中，使用Ctrl+B然后按数字键1-4切换不同窗口"
echo "使用Ctrl+B然后按D可以分离会话（程序继续在后台运行）"

tmux attach -t therapy_assistant